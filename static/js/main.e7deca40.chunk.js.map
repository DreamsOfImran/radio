{"version":3,"sources":["radio.jpg","components/Loader.js","components/Radio.js","App.js","index.js"],"names":["Loader","style","className","LIMIT_OPTIONS","Radio","playerRef","useRef","useState","loading","setLoading","stations","setStations","limit","setLimit","stationFilter","setStationFilter","favourites","setFavourites","selectedStation","setSelectedStation","useEffect","storedFavourites","JSON","parse","localStorage","getItem","setItem","stringify","setupApi","then","data","a","api","RadioBrowserApi","fetch","bind","window","searchStations","language","setDefaultSrc","event","target","src","defaultImage","handleFavourites","station","some","f","changeId","removeFavourite","filter","onClick","favicon","alt","onError","name","ref","urlResolved","showJumpControls","layout","customProgressBarSection","customControlsSection","autoPlayAfterSrcChange","autoPlay","map","value","onChange","e","l","index","fontSize","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7deca40.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/radio.6085ad72.jpg\";","import React from 'react'\n\nconst Loader = ({style}) => {\n  return (\n    <div className=\"loader\" style={style}>\n      Loading...\n    </div>\n  )\n}\n\nexport default Loader\n","import React, { useEffect, useRef, useState } from 'react'\nimport { RadioBrowserApi } from 'radio-browser-api'\nimport AudioPlayer from 'react-h5-audio-player'\nimport defaultImage from '../radio.jpg'\nimport Loader from './Loader'\n\nimport 'react-h5-audio-player/lib/styles.css'\n\nconst LIMIT_OPTIONS = [10, 20, 30, 40, 50]\n\nconst Radio = () => {\n  const playerRef = useRef([])\n\n  const [loading, setLoading] = useState(false)\n  const [stations, setStations] = useState([])\n  const [limit, setLimit] = useState(30)\n  const [stationFilter, setStationFilter] = useState(\"tamil\")\n  const [favourites, setFavourites] = useState([])\n  // const [currentlyPlaying, setCurrentlyPlaying] = useState(null);\n  const [selectedStation, setSelectedStation] = useState({})\n\n  // useEffect(() => {\n  //   playerRef.current = playerRef.current.slice(0, stations.length)\n  // }, [stations])\n\n  useEffect(() => {\n    const storedFavourites = JSON.parse(localStorage.getItem(\"radio_favourites\"))\n    if(storedFavourites) {\n      setFavourites(storedFavourites)\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(\"radio_favourites\", JSON.stringify(favourites))\n  }, [favourites])\n\n  useEffect(() => {\n    if(stationFilter !== \"favourites\") {\n      setupApi(stationFilter).then(data => {\n        setStations(data)\n      })\n    } else {\n      setStations(favourites)\n    }\n    // eslint-disable-next-line\n  }, [stationFilter, limit])\n\n  const setupApi = async (stationFilter) => {\n    setLoading(true)\n    const api = new RadioBrowserApi(fetch.bind(window), \"My Radio App\")\n\n    const stations = await api.searchStations({\n      language: stationFilter,\n      limit: limit\n    })\n    setLoading(false)\n\n    return stations\n  }\n\n  const filters = [\n    \"favourites\",\n    \"tamil\",\n    \"english\",\n    \"hindi\",\n    \"telugu\"\n  ]\n\n  const setDefaultSrc = (event) => {\n    event.target.src = defaultImage\n  }\n\n  const handleFavourites = (station) => {\n    if(favourites.some(f => f.changeId === station.changeId)) {\n      const removeFavourite = favourites.filter(f => f.changeId !== station.changeId)\n      setFavourites(removeFavourite)\n      if(stationFilter === \"favourites\") {\n        setStations(removeFavourite)\n      }\n    } else {\n      setFavourites([...favourites, station])\n    }\n  }\n\n  // const pauseOtherStations = (index) => {\n  //   if(currentlyPlaying !== null) {\n  //     playerRef.current[currentlyPlaying].audio.current.pause()\n  //     setCurrentlyPlaying(index)\n  //   } else {\n  //     setCurrentlyPlaying(index)\n  //   }\n  // }\n\n  return (\n    <div className=\"radio\">\n      <div className=\"selectedStation\">\n        <div></div>\n        <div className=\"station\">\n          <div className=\"favourite\" onClick={() => {handleFavourites(selectedStation)}}>\n            {favourites.some(f => f.changeId === selectedStation.changeId) ? \"♥\" : \"♡\"}\n          </div>\n          <div className=\"stationName\">\n            <img\n              src={selectedStation.favicon || defaultImage}\n              alt=\"station logo\"\n              className=\"logo\"\n              onError={setDefaultSrc}\n            />\n            <div className=\"name\">{selectedStation.name || \"Select a station\"}</div>\n          </div>\n\n          <AudioPlayer\n            ref={playerRef}\n            className=\"player\"\n            src={selectedStation.urlResolved}\n            showJumpControls={false}\n            layout=\"stacked\"\n            customProgressBarSection={[]}\n            customControlsSection={[\"MAIN_CONTROLS\", \"VOLUME_CONTROLS\"]}\n            autoPlayAfterSrcChange={true}\n            autoPlay\n          />\n        </div>\n      </div>\n\n      <div className=\"filters\">\n        {filters.map(filter => (\n          <span\n            key={filter}\n            className={stationFilter === filter ? \"selected\" : \"\"}\n            onClick={() => setStationFilter(filter)}\n          >\n            {filter}\n          </span>\n        ))}\n        <select className=\"options\" value={limit} onChange={(e) => setLimit(e.target.value)}>\n          {LIMIT_OPTIONS.map(l => (\n            <option key={l} value={l}>{l} Stations</option>\n          ))}\n        </select>\n      </div>\n      {loading ? <Loader /> : (\n        <div className=\"stations\">\n          {stations && stations.map((station, index) => (\n            <div className=\"station\" key={index}>\n              <div className=\"favourite\" onClick={() => {handleFavourites(station)}}>\n                {favourites.some(f => f.changeId === station.changeId) ? \"♥\" : \"♡\"}\n              </div>\n              <div className=\"stationName\">\n                <img\n                  src={station.favicon}\n                  alt=\"station logo\"\n                  className=\"logo\"\n                  onError={setDefaultSrc}\n                />\n                <div className=\"name\">{station.name}</div>\n              </div>\n              <button\n                className={selectedStation.changeId === station.changeId ? \"playButton selected\" : \"playButton\"}\n                onClick={() => {setSelectedStation(station)}}\n              >\n                {selectedStation.changeId === station.changeId ? <Loader style={{fontSize: '5px'}} /> : \"Play\"}\n              </button>\n\n              {/* <AudioPlayer\n                ref={el => playerRef.current[index] = el}\n                className=\"player\"\n                src={station.urlResolved}\n                showJumpControls={false}\n                layout=\"stacked\"\n                customProgressBarSection={[]}\n                customControlsSection={[\"MAIN_CONTROLS\", \"VOLUME_CONTROLS\"]}\n                autoPlayAfterSrcChange={false}\n                onPlay={() => pauseOtherStations(index)}\n              /> */}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Radio\n","import './App.scss'\nimport Radio from './components/Radio'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Super-Duper Radio Player</h1>\n      <h2>Pick a language, choose a station, start listening!</h2>\n      <Radio />\n    </div>\n  );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}